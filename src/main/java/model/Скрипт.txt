#8. Создать таблицы с иерархией из диаграммы в БД

CREATE DATABASE IF NOT EXISTS friends_of_man;
USE friends_of_man;
CREATE TABLE IF NOT EXISTS animals 
(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
animal_type varchar(50)
);
INSERT INTO animals (animal_type)
VALUES
("pets"),
("pack_animals");
SELECT * FROM animals;
CREATE TABLE IF NOT EXISTS kinds_of_animals 
(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
name_of_kind varchar(50),
animal_type_id INT NOT NULL,
FOREIGN KEY (animal_type_id) REFERENCES animals(id)
);
INSERT INTO kinds_of_animals (name_of_kind, animal_type_id)
VALUES
("dog", "1"),
("cat", "1"),
("hamster", "1"),
("horse", "2"),
("camel", "2"),
("donkey", "2");
SELECT * FROM kinds_of_animals;

#9. Заполнить низкоуровневые таблицы именами(животных), командами
которые они выполняют и датами рождения

CREATE TABLE IF NOT EXISTS dogs 
(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
kinds_of_animals_id INT NOT NULL,
name varchar(50),
birthday DATE,
command VARCHAR(120),
FOREIGN KEY (kinds_of_animals_id) REFERENCES kinds_of_animals(id)
);
INSERT INTO dogs (kinds_of_animals_id, name, birthday, command)
VALUES
("1", "Дружок", "2023-01-01", "Ко мне, Дай лапу"),
("1", "Жучка", "2020-01-01", "Фу, Фас"),
("1", "Барбос", "2015-01-01", "Сидеть, Лежать");
SELECT * FROM dogs;
CREATE TABLE IF NOT EXISTS cats 
(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
kinds_of_animals_id INT NOT NULL,
name varchar(50),
birthday DATE,
command VARCHAR(120),
FOREIGN KEY (kinds_of_animals_id) REFERENCES kinds_of_animals(id)
);
INSERT INTO cats (kinds_of_animals_id, name, birthday, command)
VALUES
("2", "Мурка", "2018-05-05", "Кс-кс"),
("2", "Пушок", "2022-05-05", "Брысь"),
("2", "Тишка", "2013-05-05", "Змейка");
SELECT * FROM cats;
CREATE TABLE IF NOT EXISTS hamsters 
(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
kinds_of_animals_id INT NOT NULL,
name varchar(50),
birthday DATE,
command VARCHAR(120),
FOREIGN KEY (kinds_of_animals_id) REFERENCES kinds_of_animals(id)
);
INSERT INTO hamsters (kinds_of_animals_id, name, birthday, command)
VALUES
("3", "Бобби", "2022-06-06", "Жуй"),
("3", "Тедди", "2023-06-06", "Обнимашки"),
("3", "Мэри", "2020-06-06", "Прячься");
SELECT * FROM hamsters;
CREATE TABLE IF NOT EXISTS horses 
(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
kinds_of_animals_id INT NOT NULL,
name varchar(50),
birthday DATE,
command VARCHAR(120),
FOREIGN KEY (kinds_of_animals_id) REFERENCES kinds_of_animals(id)
);
INSERT INTO horses (kinds_of_animals_id, name, birthday, command)
VALUES
("4", "Ворон", "2021-03-03", "Галоп, Аллюр"),
("4", "Верный", "2017-03-03", "Галоп, Стоять"),
("4", "Грация", "2011-03-03", "Вперед, Стоять");
SELECT * FROM horses;
CREATE TABLE IF NOT EXISTS camels 
(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
kinds_of_animals_id INT NOT NULL,
name varchar(50),
birthday DATE,
command VARCHAR(120),
FOREIGN KEY (kinds_of_animals_id) REFERENCES kinds_of_animals(id)
);
INSERT INTO camels (kinds_of_animals_id, name, birthday, command)
VALUES
("5", "Туман", "2015-04-04", "Стоять, Лежать"),
("5", "Буран", "2016-04-04", "Кушать"),
("5", "Вьюга", "2022-04-04", "Гулять");
SELECT * FROM camels;
CREATE TABLE IF NOT EXISTS donkeys 
(
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
kinds_of_animals_id INT NOT NULL,
name varchar(50),
birthday DATE,
command VARCHAR(120),
FOREIGN KEY (kinds_of_animals_id) REFERENCES kinds_of_animals(id)
);
INSERT INTO donkeys (kinds_of_animals_id, name, birthday, command)
VALUES
("6", "Ниф-ниф", "2022-12-12", "Стоять, Кушать"),
("6", "Нуф-нуф", "2014-12-12", "В сторону"),
("6", "Наф-наф", "2020-12-12", "Кружись");
SELECT * FROM donkeys;

#10. Удалив из таблицы верблюдов, т.к. верблюдов решили перевезти в другой
питомник на зимовку. Объединить таблицы лошади, и ослы в одну таблицу.

DROP TABLE camels;
CREATE TABLE IF NOT EXISTS pack_animals 
SELECT * FROM horses
UNION
SELECT * FROM donkeys;
SELECT * FROM pack_animals;

#11.Создать новую таблицу “молодые животные” в которую попадут все
животные старше 1 года, но младше 3 лет и в отдельном столбце с точностью
до месяца подсчитать возраст животных в новой таблице

CREATE TABLE IF NOT EXISTS young_animals (
  id INT AUTO_INCREMENT NOT NULL,
  name VARCHAR(50) NOT NULL,
  name_of_kind VARCHAR(50) NOT NULL,
  age_in_months INT NOT NULL,
  PRIMARY KEY (id)
);

INSERT INTO young_animals (name, age_in_months, name_of_kind)
SELECT name, TIMESTAMPDIFF(MONTH, birthday, NOW()) AS age_in_months, name_of_kind
FROM (
	SELECT name, birthday, name_of_kind  FROM cats
	JOIN kinds_of_animals ON cats.kinds_of_animals_id = kinds_of_animals.id
    UNION ALL
    SELECT name, birthday, name_of_kind  FROM dogs
	JOIN kinds_of_animals ON dogs.kinds_of_animals_id = kinds_of_animals.id
    UNION ALL
    SELECT name, birthday, name_of_kind  FROM hamsters
	JOIN kinds_of_animals ON hamsters.kinds_of_animals_id = kinds_of_animals.id
    UNION ALL
    SELECT name, birthday, name_of_kind  FROM horses
	JOIN kinds_of_animals ON horses.kinds_of_animals_id = kinds_of_animals.id
    UNION ALL
    SELECT name, birthday, name_of_kind  FROM donkeys
	JOIN kinds_of_animals ON donkeys.kinds_of_animals_id = kinds_of_animals.id
) AS animals
WHERE birthday > DATE_SUB(NOW(), INTERVAL 3 YEAR) AND birthday < DATE_SUB(NOW(), INTERVAL 1 YEAR);
SELECT * FROM young_animals;

#12. Объединить все таблицы в одну, при этом сохраняя поля, указывающие на
прошлую принадлежность к старым таблицам.

ALTER TABLE pack_animals ADD animal_type_id INT UNSIGNED NOT NULL DEFAULT 2; 
ALTER TABLE dogs ADD animal_type_id INT UNSIGNED NOT NULL DEFAULT 1;
ALTER TABLE cats ADD animal_type_id INT UNSIGNED NOT NULL DEFAULT 1;
ALTER TABLE hamsters ADD animal_type_id INT UNSIGNED NOT NULL DEFAULT 1;
CREATE TABLE IF NOT EXISTS animals_all(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  animal_type_id INT NOT NULL,
  kinds_of_animals_id INT,  
  name VARCHAR(50),
  birthday DATE,
  command VARCHAR(120),  
  FOREIGN KEY (animal_type_id) REFERENCES animals(id)  
);
INSERT INTO animals_all (name, animal_type_id, kinds_of_animals_id, birthday, command)
SELECT name, animal_type_id, kinds_of_animals_id, birthday, command FROM pack_animals p
UNION
SELECT name, animal_type_id, kinds_of_animals_id, birthday, command  FROM cats c
UNION
SELECT name, animal_type_id, kinds_of_animals_id, birthday, command  FROM dogs d
UNION
SELECT name, animal_type_id, kinds_of_animals_id, birthday, command  FROM hamsters h;
SELECT * FROM animals_all;
